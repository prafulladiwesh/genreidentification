# -*- coding: utf-8 -*-
"""k-fold.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CfSI0N-bqbbZ8zcJJPjsN5VI2m-cjNGo
"""

from google.colab import drive
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict, KFold
from sklearn.preprocessing import MinMaxScaler
from sklearn.svm import SVR
from sklearn import svm, preprocessing
import pandas as pd
import numpy as np

drive.mount('/content/drive')

"""# Reading and Preprocessing Data"""

df = pd.read_csv('/content/drive/My Drive/feature_lables.csv')
df.shape

sent_1=df["Senti_S1"].to_list()
sent_2=df["Senti_S2"].to_list()
sent_3=df["Senti_S3"].to_list()
sent_4=df["Senti_E1"].to_list()
sent_5=df["Senti_E2"].to_list()
sent_6=df["Senti_E3"].to_list()
avg_S_len=df["Avg_S_len"].to_list()
flesch=df["Flesch"].to_list()
w_count=df["W_count"].to_list()
noun_Cnt=df["Noun_Cnt"].to_list()
s_count=df["S_count"].to_list()

feature = list(zip(sent_1,sent_2,sent_3,sent_4,sent_5,sent_6,avg_S_len,flesch,w_count,noun_Cnt,s_count))

labels=df['guten_genre'].to_list()
feature=[list(_) for _ in feature]

encoder = preprocessing.LabelEncoder()
transformed_label=encoder.fit_transform(labels) #LabelEncoder()



X = features.iloc[:,1:12]
y = features.iloc[:,12]
print('Data : {}'.format(X.shape))
print('Label : {}'.format(y.shape))

X_train, X_test, y_train, y_test = train_test_split(feature, transformed_label, test_size=0.4, random_state=0)
print('X_train : {}'.format(len(X_train)))
print('y_train : {}'.format(len(y_train)))
print('X_test : {}'.format(len(X_test)))
print('y_test : {}'.format(len(y_test)))

X_train = np.array(X_train)
y_train = np.array(y_train)

"""# Linear SVM"""

clf = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)
clf.score(X_test, y_test)

"""# K-fold cross validation"""

# X_train = X_train.reset_index(drop=True)
# y_train = y_train.reset_index(drop=True)
# X_test = X_test.reset_index(drop=True)
# y_test = y_test.reset_index(drop=True)

scores = []
svr = SVR(kernel='rbf')
kfold = KFold(n_splits=10, random_state=42, shuffle=False)
print(kfold)
# for train_index, val_index in cv.split(X_train):
#     print("Train Index: ", train_index, "\n")
#     print("Val Index: ", val_index)
for train_index, test_index in kfold.split(X_train):
    # print("TRAIN:", train_index, "TEST:", test_index)
    X_tra, X_val = X_train[train_index], X_train[test_index]
    y_tra, y_val = y_train[train_index], y_train[test_index]
    
    svr.fit(X_tra, y_tra)
    scores.append(svr.score(X_val, y_val))
scores

cross_val_score(svr, X_train, y_train, cv=10)

# cross_val_predict(svr, X_train, y_train, cv=10)

scores = []
model = svm.SVC(kernel='linear')
kfold = KFold(n_splits=10, random_state=42, shuffle=False)
print(kfold)
# for train_index, val_index in cv.split(X_train):
#     print("Train Index: ", train_index, "\n")
#     print("Val Index: ", val_index)
for train_index, test_index in kfold.split(X_train):
    # print("TRAIN:", train_index, "TEST:", test_index)
    X_tra, X_val = X_train[train_index], X_train[test_index]
    y_tra, y_val = y_train[train_index], y_train[test_index]
    
    model.fit(X_tra, y_tra)
    scores.append(model.score(X_val, y_val))
scores

cross_val_score(model, X_train, y_train, cv=10)

print(np.mean(scores))

